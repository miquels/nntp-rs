# newsfeeds.cfg
#
# This file defines all the other servers that usenet articles are
# received from, and/or sent to. The definition of the stream of
# articles that are sent/received (such as size, groups, etc) is
# called a "newsfeed". The server that the newsfeed is exchanged
# with is called a "peer".

# Each entry has a label.
peer news.example.com {

    # It is possible to refer to a "template" peer. The settings from
    # that template will be merged with the setting here.
    #template some-template;

    # If set, the default for path-alias, accept-from, send-to.
    # You can set this to "${label}" and it will use the label of this entry.
    hostname news.example.com;

    # Each peer inserts its own name in the Path: header of an article.
    # To prevent loops, we list that name (or names) here.
    #path-identity news.example.com, newsfeed.example.com;

    # === incoming feed definition.

    # Accept articles from this host, this address, or this (CIDR)
    # address range. Can contain multiple entries.
    #accept-from news.example.com;

    # Maximum number of incoming connections at the same time from this peer.
    #max-connections-in 100;

    # If set, this peer cannot use CHECK/TAKETHIS/IHAVE/POST.
    #readonly;

    # Filter out articles in newsgroups we don't want.
    #filter-groups alt.do.not.want;

    # If the first path-identity in the Path: header of articles received
    # from this # host does not match, we log a warning (rate-limited).
    # This setting disables that warning.
    #ignore-path-mismatch;

    # When a CHECK is received, and another peer is claiming to send an
    # article with the same message-id, we usually return a 431 Try Again.
    # If "dont-defer" is set, we reply with 438 Not Wanted instead.
    #dont-defer;

    # Accept MODE HEADFEED.
    #accept-headfeed;

    # === outgoing feed definition.

    # What groups to send.
    #groups *;

    # At least one of these groups must be present in the Newsgroup: header.
    #groups-required some.group;

    # Where to send the feed.
    # If this is not set, there's no outgoing feed.
    #send-to news.example.com;

    # What source-address to use when connecting to the remote host.
    #bind-address 1.2.3.4;

    # What port to connect to (default 119).
    #port 119;

    # Maximum number of groups an article is cross-posted to.
    #max-crosspost 10;

    # Minimum number of groups an article is cross-posted to.
    #min-crosspost 2;

    # Maximum number of path-identities in the Path header.
    #max-path-lenght 50;

    # Minimum number of path-identities in the Path header.
    #min-path-lenght 2;

    # Maximum article size.
    #max-article-size 1G;

    # Minimum article size.
    #min-article-size 4K;

    # What types of articles.
    #article-types all, !binary;

    # The maximum number of parallel connections to open.
    #max-connections-out 10;

    # The maximum number of CHECK/TAKETHIS commands in-flight (default 100).
    #max-streaming-queue-size 20;

    # Number of seconds to delay articles for before sending them.
    #delay-feed 1s;

    # Don't keep a backlog on-disk; if the peer is too slow, just drop articles.
    #no-backlog;

    # If the peer sends a 431 Try Again, don't try again, just drop the article.
    #drop-deferred;

    # Maximum size of the backlog queue. With the current implemenation, we start
    # writing a new backlog file every 5 minutes, and this setting means
    # "how many backlog files to keep".
    #max-backlog-queue 100;

    # Send a MODE HEADFEED and then only headers.
    #send-headfeed;

    # Preserve the Bytes: header instead of deleting it.
    #preserve-bytes;

    # Queue only mode; don't connect to the peer.
    #queue-only;
}

# You can define templates for common settings.
# This example defines a text-only feed.
template text-only {
    groups *,!*.bina*;
    article-types !binary;
    max-article-size 64K;
}

# vim: set ts=4 sw=4 et:
